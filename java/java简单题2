1、Class.forName 和 ClassLoader的区别？
Class.forName和ClassLoader都可以加载类
ClassLoader就是遵循双亲委派模型最终调用启动类加载器的类加载器
ClassLoader.getSystemClassLoader().loadClass("com.example.A");
Class.forName()方法实际上是调用的ClassLoader来实现的
例：Class.forName("com.example.A");

2、动态代理的几种实现方式
JDK、cglib

jdk：利用反射机制，基于接口实现
cglib：基于asm，实现了无反射机制，利用空间换取时间，代理效率高于jdk


3、三种单例模式实现

饿汉式
/**
 *  单例模式：饿汉式
 *  在类加载时就创建单例对象
 *  执行效率高，但是占空间，以空间换时间，线程安全
 */
 public class Hungry{
    private static final Hungry hungry = new Hungry();
    private Hungry(){}
    public static Hungry getInstance(){ return hungry }
 }

懒汉式,第一种双重判断
/**
 * 对象使用的时候在，才去创建
 * 有线程安全的风险，需要加锁
 */
public class Lazy1{
    private Lazy1(){}
    private static Lazy1 instance = null;
    public static Lazy1 getInstance(){
        if(instance == null){
            synchronized (Lazy1.class){
                if(instance == null){
                    instance = new Lazy1();
                }
            }
        }
        return instance;
    }
}

懒汉式,第二种静态内部类
/**
 * 静态内部类在使用时才加载
 * 此模式既是懒加载，又没有加锁影响性能
 */
public class Lazy2{
    private Lazy2(){}
    public static final Lazy2 getInstance(){
        return LazyLoad.instance;
    }
    private static class LazyLoad{
        private static final Lazy2 instance = new Lazy2();
    }
}

懒汉式的变种，注册式
/**
 * spring IOC容器就是使用的这种注册式的单例模式
 */
public class BeanFactory{
    public static Map<String,Object> ioc = new ConcurrentHashMap<String,Object>();
    public static Object getBean(String className){
        if(!ioc.containsKey(className)){
            try{
                Object instance = Class.forName(className).newInstance();
                ioc.put(className,instance);
                return instance;
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        return ioc.get(className);
    }
}

4、深浅拷贝的区别
深拷贝：把里面的内容都拷贝一遍
浅拷贝：只复制引用，里层的对象修改，当前的对象也会修改

5、数组和链表数据结构
数组：是将元素在内存中连续存放，增/删一个元素，需将大量元素移动，查询快
链表：链表中的元素不是连续存放的，是通过指针联系到一起，增/删一个元素快，查询慢
数组元素在栈区，链表元素在堆区

6、堆中存什么？栈中存什么？
栈：解决的是运行问题，即程序如何运行、如何处理数据。
堆：解决的是存储问题，即数据怎么放、放在哪儿。

栈：（小）存的是基本数据类型、对象的引用。栈中一个引用占4btye。
堆：（大）存的是对象。一个对象的大小是变化的。

数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)；
数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)。

7、Error和Exception的区别
error和exception都继承自Throwable
exception下面还有CheckedException（编译时异常）和RuntimeException（运行时异常）两个子类

Error 错误，一般是不可控的、系统错误、底层资源错误，比较严重，程序对其不做处理，程序可能会终止。
Exception 异常，可控或不可控的、程序员代码错误，设计或实现问题，程序可能会继续运行。

8、运行时异常RuntimeException和编译时异常CheckedException的区别
运行时异常：程序运行后会出现的异常，例如空指针异常、运算错误、程序bug
编译时异常：一般编程工具会提示

9、在覆盖equals方法的时候，必须要遵守它的通用约定
下列约定前提是变量都不为null
自反性，x.equals(x)必须返回true
对称性，x.equals(y)返回true，y.equal(x)就必须返回true
传递性，x.equals(y)返回true，y.equals(z)返回true，则x.equals(z)必须返回true
一致性，多次调用x.equals(y)一直返回true

10、实现高质量equals方法
①使用==符号检查“参数是否为这个对象的引用”，如果是返回true。（如果用比较操作，比较昂贵）
②使用instanceof操作符检查“参数是否为正确的类型”，如果不是则返回false。所谓“正确的类型”是指equals方法所在的那个类
③把参数转换为正确的类型，因为转换之前进行过instanceof测试，所以确保会成功
④对于该类中的每个“关键”域，检查参数中的域是否与该对象中对应的域相匹配，如果这些测试全部成功，则返回true。
⑤当编写完成了equals方法之后，检查“对称性”、“传递性”、“一致性”

注意：覆盖equals时总要覆盖hashCode，
如果不这样就会违反hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，
这样的集合包括HashMap、HashSet、Hashtable。

11、请结合oo设计理念，谈谈访问修饰符public、private、protected、default在应用中的作用
修饰符的主要作用是隔离防护。分别有公共、包与包之间的隔离、包内访问、继承可访问、仅类内访问

12、列出五个运行时异常
NullPointerException 空指针异常
ClassCastException   类型转换异常
ClassNotFoundException 找不到指定类异常
NumberFormatException  字符串转换数字异常
NoSuchMethodException  方法不存在异常

13、jvm和类的关系
当一个java程序运行时，必有一个jvm启动（java虚拟机）
该java程序的所有线程、变量，都处于jvm中

14、equals与hashcode的关系
equals相等的两个对象，hashcode一定相等
但是hashcode相等的两个对象，equals不一定相等

15、HashSet的实现原理
hashset是基于hashmap实现的，它底层采用hashmap来保存元素。

16、HashMap的实现原理
hashmap是基于哈希表的map接口的非同步实现的，是一个数组+链表的结合体。

17、写出效率高的一种HashMap的遍历方式
Map map = new HashMap()
Iterator iter = map.entrySet().iterator();
while(iter.hasNext()){
    Map.Entry entry = (Map.Entry) iter.next();
    Object key = entry.getKey();
    Object val = entry.getValue();
    }

hashmap、hashset等的实现原理参考：https://wiki.jikexueyuan.com/project/java-collection/hashmap.html

18、JDK和JRE有什么区别
JDK：java开发工具包，提供了java的开发环境和运行环境
JRE：java运行环境，jdk包含了jre

19、String类常用的方法都有哪些?
indexOf():返回指定字符的索引
charAt():返回索引对应的字符
replace():字符串替换
trim():去除字符串两端空白
split():分割字符串，返回数组
getBytes():返回字符串的byte类型数组
length():返回字符串长度
toLowerCase():将字符串转成小写
toUpperCase()：将字符串转成大写
subString():截取字符串
equals():字符串比较

20、Files常用方法有哪些
File.exists():     检测文件路径是否存在
File.createFile(): 创建文件
File.createDirectory():创建文件夹
File.delete():删除一个文件或目录
File.copy():复制文件
File.move():移动文件
File.size():查看文件个数
File.read():读取文件
File.write():写入文件

21、如何实现数组和List之间的转换
List转数组：ArrayList.toArray(列表)
数组转List：Arrays.asList(数组)

22、ArrayList和Vector的区别
Vector是同步的，通过数组实现
ArrayList是异步的，不会过载，比Vector快，通过数组实现

23、Array和ArrayList有何区别
Array可以容纳基本类型和对象，指定大小，功能不多
ArrayList只能容纳对象，初始大小是固定的

24、Queue中poll()和remove()有什么区别
它两都是从队列中取一个元素，poll失败时会返回空，remove()失败时返回异常

25、哪些集合线程是安全的？
vector、statck（堆栈类）、hashtable、enumeration（枚举）

26、Iterator怎么使用、有什么特点
Iterator是迭代器的简单实现，只能单向移动
①、iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。
②、使用next()获得序列中的下一个元素
③、使用hasNext()检查是否还有下一个元素
④、使用remove()将迭代器返回元素并删除

27、Iterator和ListIterator有什么区别
Iterator可用来遍历set和List，
ListIterator只能用来遍历List，它可以向前或向后遍历，还包含其他增、替换等功能






